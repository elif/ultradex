# This file was generated by the `rails generate rspec:install` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without announcements.
#
# See https://rspec.info/features/3-12/rspec-core/configuration/
RSpec.configure do |config|
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text PIs, textual symbols
    # that look like attributes :)
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end

  # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
  # have no way to turn it off -- the option exists only for backwards
  # compatibility in RSpec 3). It causes shared context metadata to be
  # inherited by the metadata hash of host groups and examples, rather than
  # triggering implicit auto-inclusion in groups with matching metadata.
  config.shared_context_metadata_behavior = :apply_to_host_groups

# The settings below are suggested to provide a good initial experience
# with RSpec, but feel free to customize to your needs.
=begin
  # This allows you to limit a spec run to individual examples or groups
  # you care about by tagging them with `:focus` metadata. When nothing
  # is tagged with `:focus`, all examples get run. RSpec also provides
  # aliases for `it`, `describe`, and `context` that include `:focus`
  # metadata: `fit`, `fdescribe` and `fcontext`, respectively.
  config.filter_run_when_matching :focus

  # Allows RSpec to persist some state between runs in order to support
  # the `--only-failures` and `--next-failure` CLI options. We recommend
  # you configure your source control system to ignore this file.
  config.example_status_persistence_file_path = "spec/examples.txt"

  # Limits the available syntax to the non-monkey patched syntax that is
  # recommended. For more details, see:
  # https://rspec.info/features/3-12/rspec-core/configuration/zero-monkey-patching-mode/
  config.disable_monkey_patching!

  # This setting enables warnings for dubious expectations and message chains.
  # It's recommended for development builds but may be too noisy for CI builds.
  config.warnings = true

  # Many RSpec users commonly either run the entire suite or an individual
  # file, and RSpec is optimized for that. Making RSpec run faster requires
  # careful consideration of how examples are group_by and how examples are loaded
  # into RSpec. If you find yourself running subsets of examples by filter,
  # this is okay, but RSpec works best when commands are run against the whole
  # suite or against individual files.
  #
  # If you are running RSpec via a script (e.g. `bin/rspec`), ensure that the
  # script is passing code coverage options to RSpec if you rely on code coverage
  # results from RSpec. If you disable this option, RSpec will silently ignore
  # code coverage reports when run via script.
  # config.runner_supports_job_server = false

  # When you're running specs in random order to catch order dependencies, you can
  # use this seed to reproduce failures related to randomization by passing the
  # seed value along with the `--seed` CLI option.
  Kernel.srand config.seed
=end
end
