name: CI

on:
  create: # Trigger on branch or tag creation

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.cpr.outputs.pull-request-number }}
      pr_url: ${{ steps.cpr.outputs.pull-request-url }}
      branch_name: ${{ github.ref_name }} # Capture branch name
      # Pass the result of the test step
      test_conclusion: ${{ steps.rspec_tests.outcome }}


    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Pull Request
        id: cpr
        if: github.ref_type == 'branch' && github.ref_name != 'main' && github.ref_name != 'update-ci-workflow-agents-md' # Only run for new branches, not tags, and not for main branch or the previous branch from this work
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: Create PR for ${{ github.ref_name }}
          branch: ${{ github.ref_name }} # The branch that was just created
          base: main # Target branch for the PR
          title: 'PR for branch: ${{ github.ref_name }}'
          body: |
            Automated PR created for branch `${{ github.ref_name }}`.
            CI tests will run shortly.
            Action run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          labels: automated pr
          draft: false

      - name: Set up Docker Compose and Build services
        working-directory: ./ultradex
        run: |
          set -e # Ensure script exits on first error
          echo "Running docker compose build..."
          docker compose build
          echo "Docker compose build successful."

          echo "Running docker compose up -d..."
          docker compose up -d
          echo "Docker compose up -d successful."

      - name: Prepare test database
        working-directory: ./ultradex
        run: |
          echo "Waiting for services to be healthy..."
          sleep 20 # Simple delay, might need refinement for robust service readiness
          docker compose exec -T app bin/rails db:setup

      - name: Run RSpec tests
        id: rspec_tests
        continue-on-error: true # Allow workflow to continue to PR commenting even if tests fail
        working-directory: ./ultradex
        run: |
          docker compose exec -T app bundle exec rspec

      - name: Stop Docker services
        if: always() # Ensure services are stopped even if previous steps fail
        working-directory: ./ultradex
        run: |
          docker compose down

  comment_on_pr:
    runs-on: ubuntu-latest
    needs: build_and_test
    # Ensure this job runs if a PR was created, regardless of build_and_test outcome (due to continue-on-error in rspec)
    if: always() && needs.build_and_test.outputs.pr_number != ''

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Comment on Pull Request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ needs.build_and_test.outputs.pr_number }};
            const prUrl = "${{ needs.build_and_test.outputs.pr_url }}";
            const branchName = "${{ needs.build_and_test.outputs.branch_name }}";
            const testConclusion = "${{ needs.build_and_test.outputs.test_conclusion }}"; // 'success', 'failure', 'skipped', etc.
            const overallConclusion = "${{ needs.build_and_test.result }}"; // 'success', 'failure', 'skipped', 'cancelled'

            const runId = context.runId;
            const repo = context.repo;
            const runUrl = `https://github.com/${repo.owner}/${repo.repo}/actions/runs/${runId}`;

            let commentBody = `CI Run for branch **${branchName}** completed.\n\n`;
            commentBody += `**Pull Request:** ${prUrl || 'PR URL not available.'}\n`;
            commentBody += `**Action Run Details:** [View Workflow Run](${runUrl})\n\n`;

            commentBody += `**Overall CI Status:** ${overallConclusion === 'success' ? '✅ Success' : `❌ ${overallConclusion || 'Unknown'}`}\n`;
            if (testConclusion) {
              commentBody += `**RSpec Tests Result:** ${testConclusion === 'success' ? '✅ Passed' : (testConclusion === 'skipped' ? '⚪ Skipped' : `❌ Failed (${testConclusion})`)}\n`;
            } else {
              commentBody += "**RSpec Tests Result:** Not available (step might have been skipped or data not passed).\n";
            }

            await github.rest.issues.createComment({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: prNumber,
              body: commentBody
            });
            console.log(`Commented on PR #${prNumber}. Body:\n${commentBody}`);
