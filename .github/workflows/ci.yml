name: CI

on:
  create: # Trigger on branch or tag creation

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    outputs:
      pr_number: ${{ steps.cpr.outputs.pull-request-number }}
      pr_url: ${{ steps.cpr.outputs.pull-request-url }}
      branch_name: ${{ github.ref_name }} # Capture branch name

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose and Build services
        working-directory: ./ultradex
        run: |
          set -e # Ensure script exits on first error
          echo "Running docker compose build..."
          docker compose build
          echo "Docker compose build successful."

          echo "Running docker compose up -d..."
          docker compose up -d
          echo "Docker compose up -d successful."

      - name: Prepare test database
        working-directory: ./ultradex
        run: |
          echo "Waiting for services to be healthy..."
          sleep 20 # Simple delay, might need refinement for robust service readiness
          docker compose exec -T app bin/rails db:setup

      - name: Run RSpec tests
        id: rspec_tests
        working-directory: ./ultradex
        run: |
          docker compose exec -T app bundle exec rspec

      - name: Create Pull Request
        id: cpr
        if: github.ref_type == 'branch' && github.ref_name != 'main' # Only run for branches, not tags, and not for main branch
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: Create PR for ${{ github.ref_name }}
          branch: ${{ github.ref_name }} # The branch that was just created
          base: main # Target branch for the PR
          title: 'PR for branch: ${{ github.ref_name }}'
          body: |
            Automated PR created for branch `${{ github.ref_name }}`.
            Action run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          labels: automated pr
          draft: false

      - name: Stop Docker services
        if: always() # Ensure services are stopped even if previous steps fail
        working-directory: ./ultradex
        run: |
          docker compose down

  comment_on_pr:
    runs-on: ubuntu-latest
    needs: build_and_test
    if: always() && needs.build_and_test.outputs.pr_number != '' # Only run if a PR was created

    steps:
      - name: Checkout code # Needed for github-script context if accessing local files, though not strictly here
        uses: actions/checkout@v4

      - name: Comment on Pull Request
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = ${{ needs.build_and_test.outputs.pr_number }};
            const prUrl = "${{ needs.build_and_test.outputs.pr_url }}";
            const branchName = "${{ needs.build_and_test.outputs.branch_name }}";
            const runId = ${{ github.run_id }};
            const repo = context.repo;
            const runUrl = `https://github.com/${repo.owner}/${repo.repo}/actions/runs/${runId}`;
            let commentBody = `CI Run for branch **${branchName}** completed.\n\n`;

            commentBody += `**Workflow Status:** ${context.payload.workflow_run ? (context.payload.workflow_run.conclusion === 'success' ? '✅ Success' : '❌ Failure') : (job.status === 'success' ? '✅ Success' : '❌ Failure') }\n`;
            commentBody += `**Pull Request:** ${prUrl || 'PR not created or URL unavailable.'}\n`;
            commentBody += `**Action Run Details:** [View Workflow Run](${runUrl})\n\n`;

            // Attempt to get job status from the build_and_test job
            // This is a bit indirect; ideally, you'd pass specific test results if needed.
            // For now, a general status based on the 'needs' context.
            const buildTestJob = (await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            })).data.jobs.find(job => job.name === 'build_and_test');

            if (buildTestJob) {
              commentBody += `**Build and Test Job Status:** ${buildTestJob.conclusion === 'success' ? '✅ Succeeded' : `❌ ${buildTestJob.conclusion}`}\n`;
              // You could add more details here, e.g., link to specific steps or extract test summaries if they were output as artifacts.
            } else {
              commentBody += "Could not retrieve detailed status for the 'build_and_test' job.\n";
            }

            await github.rest.issues.createComment({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: prNumber,
              body: commentBody
            });
            console.log(`Commented on PR #${prNumber}. Body:\n${commentBody}`);
