name: CI

on:
  push:
    branches: [ main ]

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose and Build services
        working-directory: ./ultradex
        run: |
          set -e # Ensure script exits on first error
          echo "Running docker compose build..."
          docker compose build > $GITHUB_WORKSPACE/docker_build_output.log 2>&1
          BUILD_EXIT_CODE=$?
          if [ $BUILD_EXIT_CODE -ne 0 ]; then
            echo "Docker compose build failed with exit code $BUILD_EXIT_CODE. Full log:"
            cat $GITHUB_WORKSPACE/docker_build_output.log
            exit $BUILD_EXIT_CODE
          fi
          echo "Docker compose build successful."

          echo "Running docker compose up -d..."
          docker compose up -d > $GITHUB_WORKSPACE/docker_up_output.log 2>&1
          UP_EXIT_CODE=$?
          if [ $UP_EXIT_CODE -ne 0 ]; then
            echo "Docker compose up -d failed with exit code $UP_EXIT_CODE. Full log:"
            cat $GITHUB_WORKSPACE/docker_up_output.log
            # Also output build log for context if up fails, as it might be related
            echo "--- Docker Build Log (for context as 'up' failed) ---"
            cat $GITHUB_WORKSPACE/docker_build_output.log
            exit $UP_EXIT_CODE
          fi
          echo "Docker compose up -d successful."

      - name: Prepare test database
        working-directory: ./ultradex
        run: |
          echo "Waiting for services to be healthy..."
          # Add a short delay or a more sophisticated wait for services like PostgreSQL
          # For now, a simple sleep. This might need refinement.
          sleep 20
          docker compose exec -T app bin/rails db:setup

      - name: Run RSpec tests
        working-directory: ./ultradex
        run: |
          docker compose exec -T app bundle exec rspec

      - name: Output Failure Logs
        if: failure()
        working-directory: ./ultradex # pwd is $GITHUB_WORKSPACE/ultradex
        run: |
          set -x # Echo commands for debugging this script

          BUILD_LOG_FILE="$GITHUB_WORKSPACE/docker_build_output.log"
          UP_LOG_FILE="$GITHUB_WORKSPACE/docker_up_output.log"
          PROCESSED_BUILD_OR_UP_ERROR=false

          echo "--- Analyzing Failure Logs ---"

          if [ -f "$BUILD_LOG_FILE" ]; then
            echo "Analyzing Docker build log: $BUILD_LOG_FILE"
            # Try to find specific error lines.
            # Add more specific error patterns as needed.
            if grep -E -i -C 5 'ERROR|failed to build|Step [0-9]+/[0-9]+ failed|failed to fetch|not found|npm: not found|Could not resolve|unable to access' "$BUILD_LOG_FILE"; then
              PROCESSED_BUILD_OR_UP_ERROR=true
              echo "--- End of relevant Docker build log excerpt ---"
            else
              echo "No specific critical error markers found in Docker build log via grep, but build may have still failed."
              # As a fallback if specific grep fails, but file exists, show last N lines.
              echo "Displaying last 20 lines of Docker build log as a fallback:"
              tail -n 20 "$BUILD_LOG_FILE"
              PROCESSED_BUILD_OR_UP_ERROR=true # Consider it processed to avoid RSpec logs if build log exists.
            fi
          else
            echo "Docker build log ($BUILD_LOG_FILE) not found."
          fi

          # Only check UP_LOG_FILE if we haven't found a definitive build error from BUILD_LOG_FILE
          if [ "$PROCESSED_BUILD_OR_UP_ERROR" = false ]; then
            if [ -f "$UP_LOG_FILE" ]; then
              echo "Analyzing Docker up log: $UP_LOG_FILE"
              if grep -E -i -C 5 'ERROR|Cannot start service|failed| unhealthy|exited with code' "$UP_LOG_FILE"; then
                PROCESSED_BUILD_OR_UP_ERROR=true
                echo "--- End of relevant Docker up log excerpt ---"
              else
                echo "No specific critical error markers found in Docker up log via grep."
                echo "Displaying last 20 lines of Docker up log as a fallback:"
                tail -n 20 "$UP_LOG_FILE"
                PROCESSED_BUILD_OR_UP_ERROR=true # Consider it processed.
              fi
            else
              echo "Docker up log ($UP_LOG_FILE) not found (and no build error processed)."
            fi
          fi

          # If we haven't processed a build/up error, then proceed to check app service logs
          if [ "$PROCESSED_BUILD_OR_UP_ERROR" = false ]; then
            echo "Build and up logs did not show immediate critical errors, or logs were not found."
            echo "Checking application service ('app') logs..."
            # Check if the 'app' service is running or has ever run.
            if [ -n "$(docker compose ps -q app)" ] || docker compose ps app | grep -iq 'exited'; then
              echo "The 'app' service is (or was) running/exited. Attempting to extract RSpec failure logs:"
              docker compose logs app | grep -E -A 30 'Failures:|Failure/Error:|Failed examples:' \
              || (echo "No RSpec failure markers found in 'app' service logs. Dumping last 50 lines of 'app' service as fallback." && docker compose logs app | tail -n 50)
            else
              echo "The 'app' service does not appear to be running and may have never started."
              echo "This is an unexpected state if build/up logs were clean. Please review full CI logs."
            fi
          fi
          echo "--- End of Failure Log Analysis ---"

      - name: Stop Docker services
        if: always() # Ensure services are stopped even if previous steps fail
        working-directory: ./ultradex
        run: |
          docker compose down
