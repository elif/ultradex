name: CI

on:
  push:
    branches: [ main ]

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose and Build services
        working-directory: ./ultradex
        run: |
          set -e # Ensure script exits on first error
          echo "Running docker compose build..."
          docker compose build > $GITHUB_WORKSPACE/docker_build_output.log 2>&1
          BUILD_EXIT_CODE=$?
          if [ $BUILD_EXIT_CODE -ne 0 ]; then
            echo "Docker compose build failed with exit code $BUILD_EXIT_CODE. Full log:"
            cat $GITHUB_WORKSPACE/docker_build_output.log
            exit $BUILD_EXIT_CODE
          fi
          echo "Docker compose build successful."

          echo "Running docker compose up -d..."
          docker compose up -d > $GITHUB_WORKSPACE/docker_up_output.log 2>&1
          UP_EXIT_CODE=$?
          if [ $UP_EXIT_CODE -ne 0 ]; then
            echo "Docker compose up -d failed with exit code $UP_EXIT_CODE. Full log:"
            cat $GITHUB_WORKSPACE/docker_up_output.log
            # Also output build log for context if up fails, as it might be related
            echo "--- Docker Build Log (for context as 'up' failed) ---"
            cat $GITHUB_WORKSPACE/docker_build_output.log
            exit $UP_EXIT_CODE
          fi
          echo "Docker compose up -d successful."

      - name: Debug Container Environment
        working-directory: ./ultradex
        run: |
          docker compose exec -T --user root app sh -c "\
          echo '--- Running as root ---'; \
          whoami; \
          pwd; \
          echo 'Listing /usr/src/app as root:'; \
          ls -la /usr/src/app; \
          echo 'Permissions of /usr/src/app/Gemfile.lock as root:'; \
          stat /usr/src/app/Gemfile.lock || echo 'Gemfile.lock not found by root'; \
          echo 'Verifying appuser existence and details:'; \
          id appuser || echo 'appuser not found'; \
          cat /etc/passwd | grep appuser || echo 'appuser not in /etc/passwd'; \
          echo 'Root environment variables:'; \
          env; \
          echo 'Attempting chmod 777 /usr/src/app/Gemfile.lock as root:'; \
          cd /usr/src/app && chmod -v 777 Gemfile.lock || echo 'chmod as root failed or Gemfile.lock not found in /usr/src/app'; \
          echo 'Listing /usr/src/app after root chmod:'; \
          ls -la /usr/src/app; \
          echo '--- Switching to appuser for further checks ---'; \
          echo 'Running tests as appuser via su appuser -c \"...\"'; \
          su appuser -c \"\
          echo '--- Running as appuser (via su appuser -c) ---'; \
          whoami; \
          pwd; \
          echo 'Listing /usr/src/app as appuser:'; \
          ls -la /usr/src/app; \
          echo 'appuser environment variables:'; \
          env; \
          echo 'Attempting to touch Gemfile.lock as appuser:'; \
          touch /usr/src/app/Gemfile.lock && echo 'Touch Gemfile.lock successful' || echo 'Touch Gemfile.lock FAILED'; \
          echo 'Checking bundler paths as appuser:'; \
          bundle_path=\\\$(bundle show bundler); \
          echo \\\"Bundler path: \\\$bundle_path\\\"; \
          bundle check || echo 'Bundle check FAILED'; \
          bundle env || echo 'Bundle env FAILED'; \
          \" \
          "

      - name: Run RSpec tests
        working-directory: ./ultradex
        run: |
          docker compose exec -T --user root app sh -c "cd /usr/src/app && chmod 777 Gemfile.lock || true; su appuser -c 'source /home/appuser/.rvm/scripts/rvm && bundle exec rspec'"

      - name: Output Failure Logs
        if: failure()
        working-directory: ./ultradex # pwd is $GITHUB_WORKSPACE/ultradex
        run: |
          BUILD_LOG_FILE="$GITHUB_WORKSPACE/docker_build_output.log"
          UP_LOG_FILE="$GITHUB_WORKSPACE/docker_up_output.log"
          PROCESSED_BUILD_OR_UP_ERROR=false

          # Intentionally minimal echos now, only outputting found errors or final status.

          if [ -f "$BUILD_LOG_FILE" ]; then
            # Grep for critical errors, show only matching lines.
            # Added 'npm: not found' directly based on observed failure.
            if grep -E -i 'ERROR|failed to build|Step [0-9]+/[0-9]+ failed|failed to fetch|npm: not found|Could not resolve|unable to access' "$BUILD_LOG_FILE"; then
              PROCESSED_BUILD_OR_UP_ERROR=true
              echo "--- Relevant lines from Docker build log above ---"
            else
              # If specific grep fails, but file exists, show last N lines as a less specific fallback.
              echo "No specific critical error markers found in Docker build log via grep. Displaying last 20 lines as fallback:"
              tail -n 20 "$BUILD_LOG_FILE"
              PROCESSED_BUILD_OR_UP_ERROR=true # Still consider it processed.
            fi
          fi

          if [ "$PROCESSED_BUILD_OR_UP_ERROR" = false ]; then
            if [ -f "$UP_LOG_FILE" ]; then
              if grep -E -i 'ERROR|Cannot start service|failed| unhealthy|exited with code' "$UP_LOG_FILE"; then
                PROCESSED_BUILD_OR_UP_ERROR=true
                echo "--- Relevant lines from Docker up log above ---"
              else
                echo "No specific critical error markers found in Docker up log via grep. Displaying last 20 lines as fallback:"
                tail -n 20 "$UP_LOG_FILE"
                PROCESSED_BUILD_OR_UP_ERROR=true
              fi
            fi
          fi

          if [ "$PROCESSED_BUILD_OR_UP_ERROR" = false ]; then
            echo "No critical errors found in build/up logs, or logs not found. Checking application service ('app') logs..."
            if [ -n "$(docker compose ps -q app)" ] || docker compose ps app | grep -iq 'exited'; then
              # RSpec logs benefit from some context.
              docker compose logs app | grep -E -A 30 'Failures:|Failure/Error:|Failed examples:' \
              || (echo "No RSpec failure markers found in 'app' service logs. Dumping last 50 lines of 'app' service as fallback." && docker compose logs app | tail -n 50)
            else
              echo "The 'app' service does not appear to have been active. No application logs to display."
            fi
          fi

      - name: Stop Docker services
        if: always() # Ensure services are stopped even if previous steps fail
        working-directory: ./ultradex
        run: |
          docker compose down
